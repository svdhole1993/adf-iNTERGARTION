{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "sddf"
		},
		"LS_AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_AzureSqlDatabase1'"
		},
		"AmazonS31_properties_typeProperties_accessKeyId": {
			"type": "object",
			"defaultValue": {
				"type": "AzureKeyVaultSecret",
				"store": {
					"referenceName": "AzureKeyVault1azuews3",
					"type": "LinkedServiceReference"
				},
				"secretName": "awsmanger"
			}
		},
		"S3_ls_properties_typeProperties_accessKeyId": {
			"type": "object",
			"defaultValue": {
				"type": "AzureKeyVaultSecret",
				"store": {
					"referenceName": "s3akv",
					"type": "LinkedServiceReference"
				},
				"secretName": "awskey1"
			}
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/customertxt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MDFLINkS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customers.csv",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "Customerslastname",
						"type": "String"
					},
					{
						"name": "Customersfirstname",
						"type": "String"
					},
					{
						"name": "CustomersCountry",
						"type": "String"
					},
					{
						"name": "Customersage",
						"type": "String"
					},
					{
						"name": "Customersgender",
						"type": "String"
					},
					{
						"name": "Customersemail",
						"type": "String"
					},
					{
						"name": "Customersprofession",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/gitdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Git",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Sales_NA.csv",
						"container": "procedure"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Employee_region",
						"type": "String"
					},
					{
						"name": "EmployeeFull name",
						"type": "String"
					},
					{
						"name": "Employee_id",
						"type": "String"
					},
					{
						"name": "EmployeeeCountry",
						"type": "String"
					},
					{
						"name": "Total_Sales",
						"type": "String"
					},
					{
						"name": "Avg_Sales",
						"type": "String"
					},
					{
						"name": "Min_Sales",
						"type": "String"
					},
					{
						"name": "MAx_Sales",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/json_gen2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filepath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "landing",
						"fileSystem": "input"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mDF_S2DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "step2BlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "mdf_file.csv",
						"container": "step2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mdfdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "step2BlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "mdfsav2.csv",
						"container": "step2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MDFLINkS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Orders.csv",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "order_id",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "Store_id",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parameteroutputDelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "paraoutputAzureDataLakeStorage2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pfile": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().pfile",
							"type": "Expression"
						},
						"fileSystem": "filesoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rawfolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "paramterlinkAzureDataLakeStorageS2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "filesoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Order Date",
						"type": "String"
					},
					{
						"name": "Customer First Name",
						"type": "String"
					},
					{
						"name": "Customer Last Name",
						"type": "String"
					},
					{
						"name": "Post Code",
						"type": "String"
					},
					{
						"name": "Region",
						"type": "String"
					},
					{
						"name": "Region Code",
						"type": "String"
					},
					{
						"name": "Product",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Sales$",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/step2DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "step2BlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customer.csv",
						"container": "step2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Row",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					},
					{
						"name": "Sales",
						"type": "String"
					},
					{
						"name": "Cust_id",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/step2SqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Setp2sqldatabasesourse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/storeeachyearsales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "step2BlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat('sales_in',item().YEAR,'.csv')",
							"type": "Expression"
						},
						"container": "step2"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AmazonS31')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AmazonS3",
				"typeProperties": {
					"serviceUrl": "https://s3.amazonaws.com",
					"accessKeyId": "[parameters('AmazonS31_properties_typeProperties_accessKeyId')]",
					"secretAccessKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1azuews3",
							"type": "LinkedServiceReference"
						},
						"secretName": "awsvalue1"
					},
					"authenticationType": "AccessKey"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SHIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/S3_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AmazonS3",
				"typeProperties": {
					"serviceUrl": "https://s3.amazonaws.com",
					"accessKeyId": "[parameters('S3_ls_properties_typeProperties_accessKeyId')]",
					"secretAccessKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "s3akv",
							"type": "LinkedServiceReference"
						},
						"secretName": "awsvalue"
					},
					"authenticationType": "AccessKey"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfEmployeesales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee"
						},
						{
							"linkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							},
							"name": "sourcedeprtment"
						},
						{
							"linkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							},
							"name": "sourceRegion"
						},
						{
							"linkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEEA"
						},
						{
							"linkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							},
							"name": "sourceNA"
						},
						{
							"linkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSA"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							},
							"name": "sinktotalyearSales"
						},
						{
							"linkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							},
							"name": "sinkEmployee",
							"rejectedDataLinkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							},
							"name": "EMpCouNA",
							"rejectedDataLinkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							},
							"name": "SalesSA",
							"rejectedDataLinkedService": {
								"referenceName": "MDFLINkS",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "unionSalesDataSANA"
						},
						{
							"name": "unionAllSalesData"
						},
						{
							"name": "unpivot1"
						},
						{
							"name": "DerviedYearSales"
						},
						{
							"name": "additionalcolumn"
						},
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "select3"
						},
						{
							"name": "EmployewRegionDept"
						},
						{
							"name": "lookuEmpDepandRegion"
						},
						{
							"name": "lookupSalesDerivrdYEar"
						},
						{
							"name": "ReleventColumn"
						},
						{
							"name": "SummryofEmployee"
						},
						{
							"name": "aggregate2TotalSalesPeryear"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Employee_id as integer,",
						"          store_id as string,",
						"          department_id as integer,",
						"          firstname as string,",
						"          lastname as string,",
						"          Country as string,",
						"          age as integer,",
						"          gender as string,",
						"          email as string,",
						"          phone as long",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Employee.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee",
						"source(output(",
						"          department_id as short,",
						"          Department as string,",
						"          Phone as integer,",
						"          Email as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Department.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourcedeprtment",
						"source(output(",
						"          region_id as short,",
						"          region as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Region.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceRegion",
						"source(output(",
						"          Employee_id as integer,",
						"          Sales_2018 as integer,",
						"          Sales_2019 as integer,",
						"          Sales_2020 as integer,",
						"          Sales_2021 as integer,",
						"          Sales_2022 as integer,",
						"          Sales_2023 as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Sales_EAA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEEA",
						"source(output(",
						"          Employee_id as short,",
						"          Sales_2018 as short,",
						"          Sales_2019 as short,",
						"          Sales_2020 as short,",
						"          Sales_2021 as short,",
						"          Sales_2022 as short,",
						"          Sales_2023 as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Sales_NA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceNA",
						"source(output(",
						"          Employee_id as short,",
						"          Sales_2018 as short,",
						"          Sales_2019 as short,",
						"          Sales_2020 as short,",
						"          Sales_2021 as short,",
						"          Sales_2022 as short,",
						"          Sales_2023 as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Sales_SA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSA",
						"sourceNA, sourceSA union(byName: true)~> unionSalesDataSANA",
						"unionSalesDataSANA, sourceEEA union(byName: true)~> unionAllSalesData",
						"unionAllSalesData unpivot(output(",
						"          Year as string,",
						"          Sales as integer",
						"     ),",
						"     ungroupBy(Employee_id),",
						"     lateral: true,",
						"     ignoreNullPivots: true) ~> unpivot1",
						"unpivot1 derive(YEAR = toInteger(right(Year, 4))) ~> DerviedYearSales",
						"sourceEmployee derive({EmployeeFull name} = firstname + '  '+lastname,",
						"          EmployeeeCountry = split(Country,', ')[1],",
						"          {Region ID} = split(Country, ', ')[2]) ~> additionalcolumn",
						"additionalcolumn select(mapColumn(",
						"          Employee_id,",
						"          department_id,",
						"          {EmployeeFull name},",
						"          EmployeeeCountry,",
						"          {Region ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"sourcedeprtment select(mapColumn(",
						"          department_id,",
						"          Department",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"sourceRegion select(mapColumn(",
						"          Employee_region_id = region_id,",
						"          Employee_region = region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"select1, sourcedeprtment lookup(select1@department_id == sourcedeprtment@department_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> EmployewRegionDept",
						"EmployewRegionDept, select3 lookup(toInteger({Region ID}) == Employee_region_id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookuEmpDepandRegion",
						"lookuEmpDepandRegion, DerviedYearSales join(select1@Employee_id == unpivot1@Employee_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> lookupSalesDerivrdYEar",
						"lookupSalesDerivrdYEar select(mapColumn(",
						"          Employee_id = select1@Employee_id,",
						"          {EmployeeFull name},",
						"          EmployeeeCountry,",
						"          Employee_region,",
						"          Sales,",
						"          YEAR = DerviedYearSales@YEAR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ReleventColumn",
						"ReleventColumn aggregate(groupBy(Employee_region,",
						"          {EmployeeFull name},",
						"          Employee_id,",
						"          EmployeeeCountry),",
						"     Total_Sales = sum(Sales),",
						"          Avg_Sales = avg(Sales),",
						"          Min_Sales = min(Sales),",
						"          MAx_Sales = max(Sales)) ~> SummryofEmployee",
						"ReleventColumn aggregate(groupBy(Employee_id,",
						"          {EmployeeFull name},",
						"          YEAR),",
						"     Total_Sales = sum(Sales),",
						"          Avg_Sales = avg(Sales),",
						"          Max_Sales = max(Sales),",
						"          Min_Sales = min(Sales)) ~> aggregate2TotalSalesPeryear",
						"SummryofEmployee split(Employee_region == 'South America',",
						"     Employee_region == 'North America',",
						"     disjoint: false) ~> split1@(SummeryEmployeeSalesSA, SummeryEmployeeSalesNA, SummeryEmployeeSalesEEA)",
						"aggregate2TotalSalesPeryear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'procedure',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Total_Sales_Year.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinktotalyearSales",
						"split1@SummeryEmployeeSalesSA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'procedure',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['EEASales.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkEmployee",
						"split1@SummeryEmployeeSalesNA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'procedure',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Sales_NA.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> EMpCouNA",
						"split1@SummeryEmployeeSalesEEA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'procedure',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['EmpSalesSA'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SalesSA"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[listsalesyear]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "step2SqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[salesineachyear]",
											"storedProcedureParameters": {
												"Per_year": {
													"type": "Int32",
													"value": {
														"value": "@item().year",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "step2SqlTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "storeeachyearsales",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-13T10:56:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/step2SqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/storeeachyearsales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesYEarDAta')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfEmployeesales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dfEmployeesales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceEmployee": {},
									"sourcedeprtment": {},
									"sourceRegion": {},
									"sourceEEA": {},
									"sourceNA": {},
									"sourceSA": {},
									"sinktotalyearSales": {},
									"sinkEmployee": {},
									"EMpCouNA": {},
									"SalesSA": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-16T11:28:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfEmployeesales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/calling mul tablesuingpara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy  dec table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ParamDelimitedText1Step2",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "Sales_DEC_2022.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "parameteroutputDelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"pfile": "Decsales.scv"
								}
							}
						]
					},
					{
						"name": "Copy feb",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy  dec table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ParamDelimitedText1Step2",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "Sales_FEB_2023.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "parameteroutputDelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"pfile": "Febsales.scv"
								}
							}
						]
					},
					{
						"name": "Copyjan",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy feb",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ParamDelimitedText1Step2",
								"type": "DatasetReference",
								"parameters": {
									"Filename": "Sales_JAN_2023.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "parameteroutputDelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"pfile": "jansales.scv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-12T09:36:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/parameteroutputDelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy data s3to adf')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "json_gen2",
								"type": "DatasetReference",
								"parameters": {
									"filepath": {
										"value": "@concat(formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'),'/')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "json_gen2",
								"type": "DatasetReference",
								"parameters": {
									"filepath": {
										"value": "@concat('landing/',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MM'),'/',formatDateTime(utcnow(),'dd'),'/')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-09T19:21:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/json_gen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delte filr szie more tham 158')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "rawfolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"itemName",
								"itemType"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ParamDelimitedText1Step2",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size",
											"structure"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get Metadata2').output.size,150)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Delete1",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "ParamDelimitedText1Step2",
														"type": "DatasetReference",
														"parameters": {
															"Filename": {
																"value": "@item().itemName",
																"type": "Expression"
															}
														}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "step2BlobStorage1",
															"type": "LinkedServiceReference"
														}
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-13T06:57:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/rawfolder')]"
			]
		}
	]
}